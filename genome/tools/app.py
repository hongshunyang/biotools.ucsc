#!/usr/bin/env python3
# -*- coding:utf-8 -*-
# Copyright (C) yanghongshun@gmail.com
#

import os,sys,configparser,getopt

import mysql.connector

from openpyxl import Workbook
from openpyxl import load_workbook

import csv,shutil

from sortedcontainers import SortedDict

from Bio import Entrez
Entrez.email = "yanghongshun@gmail.com"

"""

0、必须移至tools目录中执行./app.py,同时要处理的文件必须放置在data目录中，结果文件放置在result目录中
1、读取settings.ini的section，获取数据库信息和查询信息
2、统一查询函数为querySourceData(genome,dbprofile,dbconn)
	此处genome也就是GRCm38,dbprofile为查询标记
	在调用函数时_query_[genome]_[dbprofile]方便维护
	csv:标题行必须如右：'genoName','genoStart','genoEnd','repClass','repFamily'
3、数据源仓库读取方式：memory,online,local(需要sync)
4、-d 处理的数据文件格式如下：
			A			B		
		1	Chromosome	Region
		2	1			193222062
		
	必须为.xlsx格式


5、TODO
##repClass-mode  
调取远程源数据列repClass，其值仅包含为:'SINE','LINE','LTR','DNA' 此处变更时检索##repClass-mode做相应调整代码
当本地数据位点Region属于相应的区间[genoStart,genoEnd],并且本地数据Chromosome==genoName，读取repClass,repFamily并插入到本地数据结果:
   
6、处理result 时，sine,line,ltr,dna 8列格式必须为
	[i]='repClassSINE'
	[i+1]='repFamilySINE'
	[i+2]='repClassLINE'
	[i+3]='repFamilyLINE'
	[i+4]='repClassLTR'
	[i+5]='repFamilyLTR'
	[i+6]='repClassDNA'
	[i+7]='repFamilyDNA'
	
7、
bed file 格式：

chr1    4785572 4785726 -       uc007afe.3      UTR     UTR5
chr1    4807892 4807928 +       uc007afg.1      UTR     UTR5
chr1    4807928 4807982 +       uc007afg.1      CDS     Exon 1
chr1    4807982 4808454 +       uc007afg.1      INTRON  Intron 1

"""

APP_TOOLS_DIRNAME = 'tools'
APP_TOOLS_DATA_DIRNAME = '_data'
APP_TOOLS_RESULT_DIRNAME = '_result'
APP_DATA_DIRNAME = 'data'
APP_RESULT_DIRNAME = 'result'



def usage():
	print('-s,--setting:setting config file path ')
	print('-g,--genome:section in the setting config file ')
	print('%s mark repclass,repfamily(sine,line,ltr,dna) %s' % ('-'*20,'-'*20))
	print('对原始文件(必须包含chromosome,region列,文件类型.xlsx,位于data目录)检索远端数据库并标记位点的repClass,repFamily(生成结果文件csv位于result目录)')
	print('-d,--data:dir or file,data files that needs to be dealed ')
	print('./app.py -s settings.RepeatMasker.ini -g GRCm38 -d ../data/09102016/Medium/WT-4/WT-4\ C\ to\ A\ 5648.xlsx')
	print('./app.py -s settings.RepeatMasker.ini -g GRCm38 -d ../data/09102016/')

	print('%s mark strand %s' % ('-'*20,'-'*20))
	print('对原始文件(必须包含chromosome,region列,文件类型.xlsx,位于data目录)检索远端数据库并标记位点的strand(生成结果文件csv位于result目录)')
	print('-d,--data:dir or file,data files that needs to be dealed ')
	print('./app.py -s settings.strand.ini -g GRCm38 -d ../data/09102016/Medium/WT-4/WT-4\ C\ to\ A\ 5648.xlsx')
	print('./app.py -s settings.strand.ini -g GRCm38 -d ../data/09102016/')	

	print('%s mark snp142Common %s' % ('-'*20,'-'*20))
	print('对原始文件(必须包含chromosome,region列,文件类型.xlsx,位于data目录)检索远端数据库并标记位点的snp142Common(生成结果文件csv位于result目录)')
	print('-d,--data:dir or file,data files that needs to be dealed ')
	print('./app.py -s settings.snp142Common.ini -g GRCm38 -d ../data/20170701/WT2.xlsx')
	print('./app.py -s settings.snp142Common.ini -g GRCm38 -d ../data/20170701/')	

	print('%s statistic repfamily count %s' % ('-'*20,'-'*20))
	print('对已经插入repClass,repFamily(共8列，sine,line,ltr,dna(*2))的结果文件(位于result目录,文件类型.csv)进行统计，每个结果文件包含多少class，多少family生成结果一个文件(.csv)位于tools(GRCm38_RepeatMasker_stats_result.csv)_result目录')
	print('默认统计每一个文件中每一个repfamily有出现多少次')
	print('-r,--result:dir or file,result files that was generated by app')
	print('./app.py -s settings.ini -g GRCm38 -r ../result/09102016/Medium/WT-4/result_WT-4\ C\ to\ A\ 5648.csv')
	print('./app.py -s settings.ini -g GRCm38 -r ../result/09102016/')
	print('可选参数intersectClusterName:["repfamily","repclass","repclassrepfamily"]')
	print('--intersectClusterName==repfamily:统计每一个repfamily上有多少个不同的clustername')
	print('--intersectClusterName==repclass:统计每一个repclass上有多少个不同的clustername')
	print('--intersectClusterName==repclassrepfamily:统计所有clustername中有多少个clustername会与repclass或者repfamily产生交集，后者8列中至少存在一列与clustername相交')
	print('./app.py -s settings.ini -g GRCm38 -r ../result/09242016 --intersectClusterName=repclassrepfamily')
	
	
	
	print('%s cluster file %s' % ('-'*20,'-'*20))
	print('对原始文件(必须包含chromosome,region，文件类型：xlsx,csv,位于data目录)根据提供的参数，按照就近划分原则(region值从小到大)进行分割，并插入第一列Clustername与结果文件(csv格式)中')
	print('-c,--cluster:dir or file,cluster files that needs to be clustered')
	print('-e,--record:row count numbers of a cluster')
	print('-t,--threshold:add a number for region place')
	print('-o,--coverage:filter value of Coverage column value')
	print('-f,--frequency:filter value of Frequency column value')
	print('-y,--bayes:enabled/disabled bayes')
	print('./app.py -c ../data/09102016/Medium/WT-4/WT-4\ C\ to\ A\ 5648.xlsx -e 3 -t 2500 -o 5 -f 5')
	print('./app.py -c ../data/09102016/ -e 3 -t 2500 -o 5 -f 5')
	print('划分片段的原则是：根据Region值就近选择！')
	
	
	print('%s mark CDS,5UTR,3UTR,INTRON %s' %('-'*20,'-'*20))
	print('bed 文件有utils/kg2bed工具生成,置于tools/_data目录')
	print('-b,--bed:source definition file(bed file) including cds,5utr,3utr,intron position in _result directory')
	print('-x,--exon:need to be dealed file in data directory')
	print('./app.py -x ../data/09242016 -b _data/GRCm38_CDS_53UTR_INTRON.csv')
	
	print('%s 通过gene_id 从ncbi获取chr，region起始点 %s' %('-'*20,'-'*20))	
	print('--gene:dir or file that include gene_id/gene_symbol')
	
def getDataFromCSV(title,spliter,filePath):
	print("reading data from csv file:%s" % filePath)
	data = []
	if not os.path.isfile(filePath):
		print("%s not exist!" % filePath)
		sys.exit()
	
	csvfile=csv.reader(open(filePath, 'r'),delimiter=spliter)
	
	for line in csvfile:
		data.append(line)
	if title == True:
		print("delete first row:title row")
		del data[0]
	print("reading end")
	
	return data



def saveDataToCSV(title,data,filePath,fmt=''):
	print("saving data to csv file:%s" % filePath)
	
	if os.path.isfile(filePath):
		print("delete old csv file:%s" % filePath)
		os.remove(filePath)
	
	file_handle = open(filePath,'w')
	
	if fmt=='':
		csv_writer = csv.writer(file_handle,delimiter=',')##delimiter=' ',
	else:
		csv_writer = csv.writer(file_handle,delimiter=fmt)##delimiter=' ',
	
	if len(title) >0 :
		csv_writer.writerow(title)
	
	csv_writer.writerows(data)
	
	file_handle.close()
	
	print("saved end")

##.csv
def generateResultFilePath(dataFilePath,prefix=''):
	
	print("generating result file path from data file path:%s" % dataFilePath)
	filename,fileext=os.path.splitext(os.path.basename(dataFilePath))
	
	if prefix=='':
		resultFileName = 'result_'+filename+'.csv'
	else:
		resultFileName = 'result'+prefix+filename+'.csv'


	dataFileAbsPath = os.path.abspath(dataFilePath)
	
	app_root_dir = os.path.dirname(os.path.dirname(os.path.abspath(sys.argv[0])))	
	app_data_dir = app_root_dir + os.sep + APP_DATA_DIRNAME+os.sep
	app_result_dir = app_root_dir + os.sep + APP_RESULT_DIRNAME+os.sep
	
	result_tmp_dirstr = os.path.dirname(dataFileAbsPath).replace(app_data_dir,'')
	
	resultFileDir = os.path.join(app_result_dir,result_tmp_dirstr)

	if not os.path.exists(resultFileDir):
		print("create directory:%s " % resultFileDir)
		os.makedirs(resultFileDir)
	
	resultFilePath = os.path.join(resultFileDir,resultFileName)
	print("result file path is:%s" % resultFilePath)
	print("generated end")
	return resultFilePath

def setProfileSourceDataPath(genome,profile):
	print("setting profile source data path")
	profile_tmp_dirstr = os.path.dirname(os.path.abspath(sys.argv[0]))	
	profile_filename = genome+'_'+profile+'_'+'sourcedata.csv'
	
	profileSourceDataPath = os.path.join(profile_tmp_dirstr,APP_TOOLS_DATA_DIRNAME,profile_filename)
	
	print("profile source data path is:%s" % profileSourceDataPath )
	print("set end")
	return profileSourceDataPath

def setStatsResultPath(genome,profile,intersectClusterName,repeatClusterName):
	print("setting stats result path")
	result_tmp_dirstr = os.path.dirname(os.path.abspath(sys.argv[0]))	
	
	result_filename = genome+'_'+profile+'_'+'stats'	
	if intersectClusterName.lower() in ['repfamily','repclass','repclassrepfamily']:
		result_filename	+= '_clustername_'+intersectClusterName.lower()
	else:
		result_filename	+= '_repfamily_count'
	result_filename +='.csv'
	
	statsResultPath = os.path.join(result_tmp_dirstr,APP_TOOLS_RESULT_DIRNAME,result_filename)
	
	print("stats result path is:%s" % statsResultPath )
	print("set end")
	return statsResultPath



###setting config file ####
def readSettings(settingsVar):
	
	print("reading settings ini")
		
	conf=configparser.ConfigParser()
	
	if 'filePath' not in settingsVar:
		print('settingsVar["filePath"] is empty!')	
		sys.exit()	
	else:
		filePath = settingsVar['filePath']

	if 'section' not in settingsVar:
		print('settingsVar["section"] is empty!')
		sys.exit()
	else:
		section = settingsVar['section']
	
	
	#filePath
	if os.path.isfile(filePath):
		conf.read(filePath)
	else:
		print(" %s not exist!" % filePath)	
		sys.exit()
	
	#section
	if section not in conf.sections():
		print(section + " not exist!")
		sys.exit()
	
	print("read end")
	
	return conf[section]
###setting config file end #####
###db connector####
def dbConnector(type,config):
	
	print("connecting database online")
	conn=False
	
	if type=='mysql':
		return _mysqlConnector(config)


def _mysqlConnector(config):
	
	print("connecting remote mysql database ")
	conn=False
	
	try:
		conn=mysql.connector.connect(**config)
	except mysql.connector.Error as err:
		if err.errno == mysql.connector.errorcode.ER_ACCESS_DENIED_ERROR:
			print("Something is wrong with your user name or password")
		elif err.errno == mysql.connector.errorcode.ER_BAD_DB_ERROR:
			print("Database does not exist")
		else:
			print(err)
	print("connected successfully")
	return conn
###db connector end ####
##deal with data file

## deal with result file that generated from data file above step
def statsResultFile(genome,settings,resultFilePath,intersectClusterName,repeatClusterName):
	dbProfile = settings['profile']
	if (genome=='GRCm38' and dbProfile=='RepeatMasker'):
		_statsResultFile_GRCm38_RepeatMasker(genome,settings,resultFilePath,intersectClusterName,repeatClusterName)
	

def _statsResultFile_GRCm38_RepeatMasker(genome,settings,resultFilePath,intersectClusterName,repeatClusterName):
	print("acting input result file")
		
	statsResultPath = setStatsResultPath(genome,settings['profile'],intersectClusterName,repeatClusterName)
	
	statsResultData=[]
	
	if os.path.isdir(resultFilePath):
		print("result file is a directory:%s" % resultFilePath)
		for root,dirs,files in os.walk(os.path.abspath(resultFilePath)):
			for file in files:
				filename,fileext=os.path.splitext(file)
				if fileext=='.csv':
					singleFileResultData = []
					resultfileabspath = root+os.sep+file					
					singleFileResultData = _statsSingleResultFile_GRCm38_RepeatMasker(resultfileabspath,intersectClusterName,repeatClusterName)
					statsResultData.extend(singleFileResultData)
					
	elif os.path.isfile(resultFilePath):
		print("input file is a single file:%s" % resultFilePath)
		resultfileabspath = os.path.abspath(resultFilePath)
		singleFileResultData = []
		singleFileResultData = _statsSingleResultFile_GRCm38_RepeatMasker(resultfileabspath,intersectClusterName,repeatClusterName)
		statsResultData.extend(singleFileResultData)
		##print(statsResultData)
	
	##整理数据
	##提取所有分类,文件总数（对齐时的列数）
	statsResultDataDicts={}
	statsResultrepClassrepFamilyDicts={}
	###resultFileName,LINE,XXX,11
	###resultFileName,LTR,XX,223
	###resultFileName,DNA,XXXX,334
	###resultFileName,SINE,XX,2
	for r in statsResultData:
		filename=r[0]
		repclass=r[1]
		repfamily=r[2]
		stats=r[3]
		if filename not in statsResultDataDicts:
			statsResultDataDicts[filename]={}
		if repclass not in statsResultDataDicts[filename]:
			statsResultDataDicts[filename][repclass]={}
		if repfamily not in statsResultDataDicts[filename][repclass]:
			statsResultDataDicts[filename][repclass][repfamily]=stats
		
		if repclass not in statsResultrepClassrepFamilyDicts:
			statsResultrepClassrepFamilyDicts[repclass]=[]
		if repfamily not in statsResultrepClassrepFamilyDicts[repclass]:
			statsResultrepClassrepFamilyDicts[repclass].append(repfamily)
	
	##对齐数据		
	for cls in statsResultrepClassrepFamilyDicts:		
		for fl in statsResultDataDicts:
			if cls not in statsResultDataDicts[fl]:
				statsResultDataDicts[fl][cls]={}		
			for fml in statsResultrepClassrepFamilyDicts[cls]:
				if fml not in statsResultDataDicts[fl][cls]:
					statsResultDataDicts[fl][cls][fml]=0
	
			
	##保存数据
	statsResultMatrix=[]
	statsResultMatrixTitle=[]
	insertTitle=False
	for fl in SortedDict(statsResultDataDicts):
		statsResultMatrixRow=[]
		statsResultMatrixRow.append(fl)
		
		if insertTitle==False:
			statsResultMatrixTitle.append('')	
				
		for cls in SortedDict(statsResultDataDicts[fl]):
			for fml in SortedDict(statsResultDataDicts[fl][cls]):
				statsResultMatrixRow.append(statsResultDataDicts[fl][cls][fml])
				
				if insertTitle==False:
					statsResultMatrixTitle.append(cls+','+fml)
				
		
		insertTitle = True
	
		statsResultMatrix.append(statsResultMatrixRow)
	
	statsResultMatrix.insert(0,statsResultMatrixTitle)
	
	saveDataToCSV([],statsResultMatrix,statsResultPath)
	
	print("action is end")
	
def _statsSingleResultFile_GRCm38_RepeatMasker(resultfileabspath,intersectClusterName,repeatClusterName):
	print("dealing result file :%s" % resultfileabspath)
	if not os.path.isfile(resultfileabspath):
		print("result file :%s is not exist!" % resultfileabspath)
		sys.exit()
	print("loading result file")
	resultDataSet = getDataFromCSV(False,',',resultfileabspath)
	rowMaxNumber = len(resultDataSet)

	statsResultDict = {}
	
	resultFileName = os.path.basename(resultfileabspath)
	##find repClassSINE必须为起始列 i
	## start
	clusterNameColumn = -1
	repClassSINEColumn = -1
	i=0
	resultDataSetTitleRow = resultDataSet[0]
	for col in resultDataSetTitleRow:
		if(repClassSINEColumn==-1 and col.lower()=='repclasssine'):
			repClassSINEColumn=i
			print('repClassSINEColumn:%s'% repClassSINEColumn)
		if(clusterNameColumn==-1 and col.lower()=='clustername'):
			clusterNameColumn=i
			print('clusterNameColumn:%s'% clusterNameColumn)				
		i+=1
	## end
	statsWhat='repFamily'
		
	if ((intersectClusterName.lower() in ['repfamily','repclass','repclassrepfamily']) and (clusterNameColumn!=-1)):
		statsWhat = 'clusterName&'+intersectClusterName
	##仅仅统计repfamily的个数
	if statsWhat.lower() == 'repfamily':
		for row in range(1,rowMaxNumber):	##标题行	
			for col in range(repClassSINEColumn,8+repClassSINEColumn,2):##支持sine,line,ltr,dna	  
				cls = resultDataSet[row][col]
				fml = resultDataSet[row][col+1]
				if  cls !='' :
					if cls not in statsResultDict:
						statsResultDict[cls]={}
					if fml not in statsResultDict[cls]:				
						statsResultDict[cls][fml]=[]
					statsResultDict[cls][fml].append(resultDataSet[row])
	##统计每一个repfamily上有多少个不同的clustername
	elif statsWhat.lower() == 'clustername&repfamily': 
		for row in range(1,rowMaxNumber):	##标题行	
			for col in range(repClassSINEColumn,8+repClassSINEColumn,2):##支持sine,line,ltr,dna	  
				cls = resultDataSet[row][col]
				fml = resultDataSet[row][col+1]
				clsnm = resultDataSet[row][clusterNameColumn] 
				if  cls !='' and clsnm !='' :
					if cls not in statsResultDict:
						statsResultDict[cls]={}
					if fml not in statsResultDict[cls]:
						statsResultDict[cls][fml]={}
					if clsnm not in statsResultDict[cls][fml]:
						statsResultDict[cls][fml][clsnm]=[]					
					statsResultDict[cls][fml][clsnm].append(resultDataSet[row])
	##统计每一个repclass上有多少个不同的clustername
	elif statsWhat.lower() == 'clustername&repclass': ##其实跟statsWhat.lower() == 'repfamily' 同理啦
		for row in range(1,rowMaxNumber):	##标题行	
			for col in range(repClassSINEColumn,8+repClassSINEColumn,2):##支持sine,line,ltr,dna	  
				cls = resultDataSet[row][col]
				clsnm = resultDataSet[row][clusterNameColumn] 
				if  cls !='' and clsnm !='' :
					if cls not in statsResultDict:
						statsResultDict[cls]={}
					if clsnm not in statsResultDict[cls]:
						statsResultDict[cls][clsnm]=[]					
					statsResultDict[cls][clsnm].append(resultDataSet[row])
	##统计每一个文件中有多少个clustername与任何一个repclass或者repfamily相交
	elif statsWhat.lower() == 'clustername&repclassrepfamily': ##其实跟statsWhat.lower() == 'repclass' 同理啦
		for row in range(1,rowMaxNumber):	##标题行	
			for col in range(repClassSINEColumn,8+repClassSINEColumn,2):##支持sine,line,ltr,dna	  
				cls = resultDataSet[row][col]
				clsnm = resultDataSet[row][clusterNameColumn] 
				if  cls !='' and clsnm !='' :
					if clsnm not in statsResultDict:
						statsResultDict[clsnm]=[]					
					statsResultDict[clsnm].append(resultDataSet[row])
					break					
	else:
		print('i dont know stats what!!')		
	

	
	statsResultData=[]		
	#title
	if statsWhat.lower() == 'repfamily':
		for k in SortedDict(statsResultDict).keys():
			print('%s %s %s' % ('-'*10,k,'-'*10))		
			for kk in SortedDict(statsResultDict[k]):	###sorted
				statsResultData.append([resultFileName,k,kk,len(statsResultDict[k][kk])])
				print('class:%s count:%s' % (kk,len(statsResultDict[k][kk])))	
			print('%s' % '-'*20)
	elif statsWhat.lower() == 'clustername&repfamily':
		for k in SortedDict(statsResultDict).keys(): ##repclass
			print('%s %s %s' % ('-'*10,k,'-'*10))		
			for kk in SortedDict(statsResultDict[k]):	###repfamily
			
				if repeatClusterName==0:
					repfamily_clusterName_Count = len(statsResultDict[k][kk].keys()) ### cluster name list
				else:
					repfamily_clusterName_Count = 0
					for kkk in statsResultDict[k][kk]:
						repfamily_clusterName_Count+=len(statsResultDict[k][kk][kkk])
				
				statsResultData.append([resultFileName,k,kk,repfamily_clusterName_Count])
				
				print('family:%s count:%s' % (kk,repfamily_clusterName_Count))	
			print('%s' % '-'*20)
	elif statsWhat.lower() == 'clustername&repclass': ##其实跟statsWhat.lower() == 'repfamily' 同理啦
		for k in SortedDict(statsResultDict).keys():
			print('%s %s %s' % ('-'*10,k,'-'*10))
			if repeatClusterName==0:
				repclass_clusterName_Count = len(statsResultDict[k].keys())
			else:
				repclass_clusterName_Count = 0
				for kk in SortedDict(statsResultDict[k]):
					repclass_clusterName_Count+=len(statsResultDict[k][kk])
			statsResultData.append([resultFileName,k,'',repclass_clusterName_Count]) ##repfamily_convertto_clustername
			print('class:%s count:%s' % (k,repclass_clusterName_Count))	
			print('%s' % '-'*20)
	elif statsWhat.lower() == 'clustername&repclassrepfamily': ##其实跟statsWhat.lower() == 'repclass' 同理啦
		print('%s %s %s' % ('-'*10,resultFileName,'-'*10))
		if repeatClusterName==0:
			repclassrepfamily_clusterName_Count = len(statsResultDict.keys())
		else:
			repclassrepfamily_clusterName_Count = 0
			for k in statsResultDict:
				repclassrepfamily_clusterName_Count+=len(statsResultDict[k])
				
		statsResultData.append([resultFileName,'','',repclassrepfamily_clusterName_Count]) ##repfamily_convertto_clustername
		print('file:%s count:%s' % (resultFileName,repclassrepfamily_clusterName_Count))	
		print('%s' % '-'*20)	
					
	print("stats end")
	return statsResultData

def geneMapData(geneFilePath):
	print("maping input  file")
	if os.path.isdir(geneFilePath):
		print("input file is a directory:%s" % geneFilePath)
		for root,dirs,files in os.walk(os.path.abspath(geneFilePath)):
			for file in files:
				filename,fileext=os.path.splitext(file)
				if fileext == '.csv':
					geneMapfileabspath = root+os.sep+file					
					_geneMapSingleFile(geneMapfileabspath)
					
	elif os.path.isfile(geneFilePath):
		print("map file is a single file:%s" % geneFilePath)
		geneMapfileabspath = os.path.abspath(geneFilePath)
		_geneMapSingleFile(geneMapfileabspath)
	print("action is end")

def _geneMapSingleFile(genefileabspath):
	print("dealing map file :%s" % genefileabspath)
	if not os.path.isfile(genefileabspath):
		print("map file :%s is not exist!" % genefileabspath)
		sys.exit()
		
	print("loading file")

	geneFileDataSet=[]
	chrColumn=0
	regionColumn=1
	geneColumn = -1
	
	i=0	
	print("generating data set from cluster file")

	filename,fileext=os.path.splitext(genefileabspath)

	
	if fileext == '.csv':
		geneFileDataSetOrig = getDataFromCSV(False,',',genefileabspath)
		geneFileDataSetOrigTitleRow = geneFileDataSetOrig[0]
		for col in geneFileDataSetOrigTitleRow:
			if(geneColumn==-1 and col.lower()=='gene_id'):
				geneColumn=i   ## insertItem : 1 0=>1
				print('geneColumn:%s'% geneColumn)
			i+=1
		geneFileDataSetOrigTitleRow.insert(chrColumn,'') ## 加入chr 列	
		geneFileDataSetOrigTitleRow.insert(regionColumn,'') ## 加入chr 列	
		
		geneFileDataSet.append(geneFileDataSetOrigTitleRow)			
		for row in range(1,len(geneFileDataSetOrig)):##第2行数据开始，第1行为标题
			geneFileRow = []
			geneID = geneFileDataSetOrig[row][geneColumn]
			handle = Entrez.esummary(db="gene", id=geneID)
			record = Entrez.read(handle)
			chrX = record['DocumentSummarySet']['DocumentSummary'][0]['Chromosome']
			regionX = int(record['DocumentSummarySet']['DocumentSummary'][0]['ChrStart'])+1 
			
			## 这个GenomicInfo是不对的
			## regionX = int(record['DocumentSummarySet']['DocumentSummary'][0]['GenomicInfo'][0]['ChrStart'])+1 ##GenomicInfo 可能为空geneid：100048885
			#todo 目测 一个gene id 是唯一标识，不管是老鼠还是人类，id不一样
			print('gene_id:%s,chr:%s,region:%s' % (geneID,chrX,regionX))
			
			geneFileDataSetOrig[row].insert(chrColumn,chrX) ## 加入chr 列
			geneFileDataSetOrig[row].insert(regionColumn,regionX) ## 加入chr 列

			for col in range(0,len(geneFileDataSetOrig[row])):
				colValue=geneFileDataSetOrig[row][col]
				geneFileRow.append(colValue)					
			geneFileDataSet.append(geneFileRow)		
	##csv end				
	###save all cell.vaule to[[],[],...,[]]
	print("generated end")	
	geneFileDataSet[0][chrColumn]='chromosome'
	geneFileDataSet[0][regionColumn]='region'
	
	prefix="_map_chr_region_"
	resultFilePath = generateResultFilePath(genefileabspath,prefix)		
	saveDataToCSV([],geneFileDataSet,resultFilePath,',')


def clusterFile(clusterFilePath,clusterConfigs):
	print("clustering input  file")
	if os.path.isdir(clusterFilePath):
		print("input file is a directory:%s" % clusterFilePath)
		for root,dirs,files in os.walk(os.path.abspath(clusterFilePath)):
			for file in files:
				filename,fileext=os.path.splitext(file)
				if fileext=='.xlsx' or fileext == '.csv':
					clusterfileabspath = root+os.sep+file					
					_clusterSingleFile(clusterfileabspath,clusterConfigs)
					
	elif os.path.isfile(clusterFilePath):
		print("cluster file is a single file:%s" % clusterFilePath)
		clusterfileabspath = os.path.abspath(clusterFilePath)
		_clusterSingleFile(clusterfileabspath,clusterConfigs)
	print("action is end")

def _clusterSingleFile(clusterfileabspath,clusterConfigs):
	print("dealing cluster file :%s" % clusterfileabspath)
	if not os.path.isfile(clusterfileabspath):
		print("cluster file :%s is not exist!" % clusterfileabspath)
		sys.exit()
	
	
	print("loading file")

	##xlsx	
	##wb=load_workbook(filename=clusterfileabspath,data_only=True,read_only=True)##fast mode
	##ws=wb.active

	clusterFileDataSet=[]
	clusterColumn=0
	chromosomeColumn = -1
	regionColumn=-1
	countColumn=-1
	coverageColumn = -1
	frequencyColumn = -1
		
	i=0	
	print("generating data set from cluster file")
	
	filename,fileext=os.path.splitext(clusterfileabspath)
	
	##xlsx	start
	if fileext=='.xlsx':
		wb=load_workbook(filename=clusterfileabspath,data_only=True,read_only=True)##fast mode
		ws=wb.active	
		for row in ws.rows:##first row 标题行
			clusterFileRow = []
			for insertItem in range(0,1):
				clusterFileRow.insert(clusterColumn,'')		
			for cell in row:			
				clusterFileRow.append(cell.value)
				if(chromosomeColumn==-1 and cell.value.lower()=='chromosome'):
					chromosomeColumn=i+1   ## insertItem : 1 0=>1
					print('chromosomeColumn:%s'% chromosomeColumn)
				if(regionColumn==-1 and cell.value.lower()=='region'):
					regionColumn=i+1
					print('regionColumn:%s'% regionColumn)
				if(countColumn==-1 and cell.value.lower()=='count'):
					countColumn=i+1
					print('countColumn:%s'% countColumn)	
				if(coverageColumn==-1 and cell.value.lower()=='coverage'):
					coverageColumn=i+1
					print('coverageColumn:%s'% coverageColumn)	
				if(frequencyColumn==-1 and cell.value.lower()=='frequency'):
					frequencyColumn=i+1
					print('frequencyColumn:%s'% frequencyColumn)	
				i=i+1
			clusterFileDataSet.append(clusterFileRow)
	##xlsx end
	##csv start TODO 不正确！！！！
	elif fileext == '.csv':
		clusterFileDataSetOrig = getDataFromCSV(False,',',clusterfileabspath)
		clusterFileDataSetOrigTitleRow = clusterFileDataSetOrig[0]
		for col in clusterFileDataSetOrigTitleRow:
			if(chromosomeColumn==-1 and col.lower()=='chromosome'):
				chromosomeColumn=i+1   ## insertItem : 1 0=>1
				print('chromosomeColumn:%s'% chromosomeColumn)
			if(regionColumn==-1 and col.lower()=='region'):
				regionColumn=i+1
				print('regionColumn:%s'% regionColumn)
			if(countColumn==-1 and col.lower=='count'):
				countColumn=i+1
				print('countColumn:%s'% countColumn)	
			if(coverageColumn==-1 and col.lower()=='coverage'):
				coverageColumn=i+1	
				print('coverageColumn:%s'% coverageColumn)
			if(frequencyColumn==-1 and col.lower()=='frequency'):
				frequencyColumn=i+1	
				print('frequencyColumn:%s'% frequencyColumn)
			i+=1
		clusterFileDataSetOrigTitleRow.insert(clusterColumn,'')
		clusterFileDataSet.append(clusterFileDataSetOrigTitleRow)			
		for row in range(1,len(clusterFileDataSetOrig)):##第2行数据开始，第1行为标题
			clusterFileRow = []
			#for insertItem in range(0,1):
			clusterFileDataSetOrig[row].insert(clusterColumn,'')
			for col in range(0,len(clusterFileDataSetOrig[row])):
				if col==regionColumn:
					colValue=int(clusterFileDataSetOrig[row][col])
				elif col==countColumn:
					colValue=int(clusterFileDataSetOrig[row][col])
				elif col==coverageColumn:
					colValue=float(clusterFileDataSetOrig[row][col])
				elif col ==frequencyColumn:
					colValue=float(clusterFileDataSetOrig[row][col])
				else:
					colValue=clusterFileDataSetOrig[row][col]
				clusterFileRow.append(colValue)			
			clusterFileDataSet.append(clusterFileRow)		
	##csv end				
	###save all cell.vaule to[[],[],...,[]]
	
	print("generated end")
	rowMaxCount = len(clusterFileDataSet)		
	
	clusterFileDataSet[0][clusterColumn]='ClusterName'
	
	print("calculating")
	
	##filter coverage,frequency col
	
	filterCoverageFrequencyColsData = []
	filterCoverageFrequencyColsData.append(clusterFileDataSet[0])
	#print(clusterFileDataSet[0])
	for row in range(1,rowMaxCount):###第0行为标题行		
		#dstChromosome = clusterFileDataSet[row][chromosomeColumn] 
		#dstRegion = int(clusterFileDataSet[row][regionColumn])
		dstCoverage = clusterFileDataSet[row][coverageColumn] 
		dstFrequency = clusterFileDataSet[row][frequencyColumn]		
		#print("current Chromosome:Region:Coverage:Frequency is : %s:%s:%s:%s" %(dstChromosome,dstRegion,dstCoverage,dstFrequency))
		filterCoverage = (float(dstCoverage)>=clusterConfigs['coverage'])
		filterFrequency = (float(dstFrequency)>=clusterConfigs['frequency'])
		
		if filterCoverage and filterFrequency :
			filterCoverageFrequencyColsData.append(clusterFileDataSet[row])
	##filter end
	##对chromosome 进行归类 chromosome 值必须相同
	rowMaxNumber = len(filterCoverageFrequencyColsData)
	filterCoverageFrequencyChromosomeDicts = {}
	for row in range(1,rowMaxNumber):
		dstChromosome = filterCoverageFrequencyColsData[row][chromosomeColumn]
		if dstChromosome not in filterCoverageFrequencyChromosomeDicts:
			filterCoverageFrequencyChromosomeDicts[dstChromosome]=[]
		filterCoverageFrequencyChromosomeDicts[dstChromosome].append(filterCoverageFrequencyColsData[row])
		
	#print(filterCoverageFrequencyChromosomeDicts['1'])
	clusteredCount = 0
	resultClusterDicts={}
	for k in filterCoverageFrequencyChromosomeDicts.keys():
		chrDataSets=[]
		chrDataSets=filterCoverageFrequencyChromosomeDicts[k]
		lengthChrDataSets = len(chrDataSets)
		#print('chr:%s,all records:%s' %(k,len(chrDataSets)))
		
		if(lengthChrDataSets>=clusterConfigs['record']): ##总行数>record
			##对chrDataSets进行考虑record 和 threshold
			##对chrDataSets根据Region value 进行排序
			#for item in chrDataSets:
			#	print(item[regionColumn])
			chrDataSets.sort(key=lambda x:x[regionColumn])
			##此时chrDataSets已经排序 按照regionColumn 值 升序 排练
			##todo 对chrDataSets 的row 统计 threshold，record
			chrRowMaxNumber = len(chrDataSets)
			if k not in resultClusterDicts:
				resultClusterDicts[k]={}
			chrDataSetsClusteredIndexList=[]
			for i in range(0,chrRowMaxNumber):
				if i not in chrDataSetsClusteredIndexList:
					IClusteredGroup=[]
					for j in range(i+1,chrRowMaxNumber):
						if (int(chrDataSets[j][regionColumn])-int(chrDataSets[i][regionColumn])<=clusterConfigs['threshold']):
							IClusteredGroup.append(j)
						else:
							break
					if len(IClusteredGroup)>=(clusterConfigs['record']-1):
						IClusteredGroup.append(i)
						IClusteredGroup.sort()
						print(IClusteredGroup)
						clusterName = 'C'+str(k)+'-'+str(i)+'-'+str(j)
						if clusterName not in resultClusterDicts[k]:
							resultClusterDicts[k][clusterName]=[]
							clusteredCount+=1
						for ij in IClusteredGroup:
							resultClusterDicts[k][clusterName].append(chrDataSets[ij])
							chrDataSetsClusteredIndexList.append(ij)
							#print(chrDataSets[ij])
				else:
					continue
			
	##collect all result into list				
	clusteredResult = []
				
	for chr in 	resultClusterDicts.keys():
		for clsName in resultClusterDicts[chr].keys():
			for row in resultClusterDicts[chr][clsName]:				
				row[clusterColumn]=clsName
				clusteredResult.append(row)
	
	
	##from result list into all original data for csv file
	for row in range(1,rowMaxCount):
		for rowR in clusteredResult:
			if (rowR[chromosomeColumn]==clusterFileDataSet[row][chromosomeColumn]) and (rowR[regionColumn]==clusterFileDataSet[row][regionColumn]):
				clusterFileDataSet[row][clusterColumn]=rowR[clusterColumn]
				break

	##
	prefix = str(clusteredCount)+'_'+ "_".join(["%s%s" % (k, v) for k, v in SortedDict(clusterConfigs).items()])+'_'
	
	resultFilePath = generateResultFilePath(clusterfileabspath,prefix)
	
		
	saveDataToCSV([],clusterFileDataSet,resultFilePath,',')	
						
	print("calculated end")

def exonFile(exonDataFilePath,bedFilePath):
	_exonFile(exonDataFilePath,bedFilePath)
	
def _exonFile(exonDataFilePath,bedFilePath):
	print("acting input exon data file")
	if os.path.isdir(exonDataFilePath):
		print("exon data file is a directory:%s" % exonDataFilePath)
		for root,dirs,files in os.walk(os.path.abspath(exonDataFilePath)):
			for file in files:
				filename,fileext=os.path.splitext(file)
				if fileext=='.csv':
					exondatafileabspath = root+os.sep+file					
					_exonSingleDataFile(exondatafileabspath,bedFilePath)
					
	elif os.path.isfile(exonDataFilePath):
		print("exon data file is a single file:%s" % exonDataFilePath)
		exondatafileabspath = os.path.abspath(exonDataFilePath)
		_exonSingleDataFile(exondatafileabspath,bedFilePath)
	print("action is end")
		
def _exonSingleDataFile(exondatafileabspath,bedFilePath):
	print("exon data file :%s" % exondatafileabspath)
	if not os.path.isfile(exondatafileabspath):
		print("exon data file :%s is not exist!" % exondatafileabspath)
		sys.exit()


	resultFilePath = generateResultFilePath(exondatafileabspath)
	if os.path.isfile(resultFilePath):
		print("delete old  result file :%s" % resultFilePath)
		os.remove(resultFilePath)
	
		
	print("loading file")
	exonFileDataSet=[]
	exonColumn=0
	chromosomeColumn = -1
	regionColumn=-1
	
	i=0	
	print("generating data set from exon file")
	
	filename,fileext=os.path.splitext(exondatafileabspath)
	if fileext=='.csv':
		exonFileDataSetOrig = getDataFromCSV(False,',',exondatafileabspath)
		exonFileDataSetOrigTitleRow = exonFileDataSetOrig[0]
		exonFileDataSetOrigTitleRow.insert(exonColumn,'')
		for col in exonFileDataSetOrigTitleRow:
			if(chromosomeColumn==-1 and col.lower()=='chromosome'):
				chromosomeColumn=i
				print('chromosomeColumn:%s'% chromosomeColumn)
			if(regionColumn==-1 and col.lower()=='region'):
				regionColumn=i
				print('regionColumn:%s'% regionColumn)	
			i+=1
		
		exonFileDataSet.append(exonFileDataSetOrigTitleRow)				
		for row in range(1,len(exonFileDataSetOrig)):##第2行数据开始，第1行为标题
			exonFileRow = []
			exonFileDataSetOrig[row].insert(exonColumn,'')
			for col in range(0,len(exonFileDataSetOrig[row])):
				if col==regionColumn:
					colValue=int(exonFileDataSetOrig[row][col])
				else:
					colValue=exonFileDataSetOrig[row][col]
				exonFileRow.append(colValue)			
			exonFileDataSet.append(exonFileRow)		
	
	print("generated end")
	
	rowMaxCount = len(exonFileDataSet)
	exonFileDataSet[0][exonColumn]='EXON'
	print("calculating")
	
	bedFileDataDicts = readyBedFileData(bedFilePath)
	
	#print(bedFileDataDicts.keys())
	
	for row in range(1,rowMaxCount):
		dstChromosome = exonFileDataSet[row][chromosomeColumn] 
		dstRegion = exonFileDataSet[row][regionColumn] ##above int()
		chrKey = 'chr'+str(dstChromosome)
		if chrKey in bedFileDataDicts:
			for bedRow in bedFileDataDicts[chrKey]:
				posStart = int(bedRow[1])
				posEnd = int(bedRow[2])
				if dstRegion>=posStart and dstRegion<=posEnd:
					mark = bedRow[5].strip().upper()
					if mark=='CDS':
						exonFileDataSet[row][exonColumn] = 'CDS' 
						print('pos:%s:%s,exon:%s'%(dstChromosome,dstRegion,bedRow[3].strip()+'CDS'))
					elif mark =='INTRON':
						exonFileDataSet[row][exonColumn] = 'INTRON'
						print('pos:%s:%s,exon:%s'%(dstChromosome,dstRegion,bedRow[3].strip()+'INTRON'))
					elif mark == 'UTR':
						utr = bedRow[6].strip().upper()
						if utr in ['UTR5','UTR3']:
							exonFileDataSet[row][exonColumn] = utr
						print('pos:%s:%s,exon:%s'%(dstChromosome,dstRegion,bedRow[3].strip()+utr))
					
				if exonFileDataSet[row][exonColumn] !='':
					break  ###
	
	saveDataToCSV([],exonFileDataSet,resultFilePath)
	
	print("action is end")

def readyBedFileData(bedFilePath):
	if os.path.exists(bedFilePath):
		bedFileData = getDataFromCSV(False,'\t',bedFilePath)
		bedFileDataDictionaryByCHR = {}
		for row in bedFileData:
			chrKey=str(row[0])
			if chrKey not in bedFileDataDictionaryByCHR:
				bedFileDataDictionaryByCHR[chrKey] = []
			
			bedFileDataDictionaryByCHR[chrKey].append(row)
		print("converted successfully")
		
		return bedFileDataDictionaryByCHR			
		
	else:
		print('bed file not exist!')
		sys.exit()


def actDataFile(genome,settings,dataFilePath,profileSourceData):
	dbProfile = settings['profile']
	if (genome=='GRCm38' and dbProfile=='RepeatMasker'):
		_actDataFile_GRCm38_RepeatMasker(dataFilePath,profileSourceData)
	elif (genome=='GRCm38' and dbProfile=='strand'):
		_actDataFile_GRCm38_strand(dataFilePath,profileSourceData)
	elif (genome=='GRCm38' and dbProfile=='snp142Common'):
    		_actDataFile_GRCm38_snp142Common(dataFilePath,profileSourceData)

def _actDataFile_GRCm38_RepeatMasker(dataFilePath,profileSourceData):
	print("acting input data file")
	if os.path.isdir(dataFilePath):
		print("data file is a directory:%s" % dataFilePath)
		for root,dirs,files in os.walk(os.path.abspath(dataFilePath)):
			for file in files:
				filename,fileext=os.path.splitext(file)
				if fileext=='.xlsx':
					datafileabspath = root+os.sep+file					
					_actSingleDataFile_GRCm38_RepeatMasker(datafileabspath,profileSourceData)
					
	elif os.path.isfile(dataFilePath):
		print("data file is a single file:%s" % dataFilePath)
		datafileabspath = os.path.abspath(dataFilePath)
		_actSingleDataFile_GRCm38_RepeatMasker(datafileabspath,profileSourceData)
	print("action is end")

def _actDataFile_GRCm38_strand(dataFilePath,profileSourceData):
    print("acting input data file")
    if os.path.isdir(dataFilePath):
        print("data file is a directory:%s" % dataFilePath)
        for root,dirs,files in os.walk(os.path.abspath(dataFilePath)):
            for file in files:
                filename,fileext=os.path.splitext(file)
                if fileext=='.xlsx':
                    datafileabspath = root+os.sep+file					
                    _actSingleDataFile_GRCm38_strand(datafileabspath,profileSourceData)
    elif os.path.isfile(dataFilePath):
        print("data file is a single file:%s" % dataFilePath)
        datafileabspath = os.path.abspath(dataFilePath)
        _actSingleDataFile_GRCm38_strand(datafileabspath,profileSourceData)
    print("action is end")

def _actDataFile_GRCm38_snp142Common(dataFilePath,profileSourceData):
    print("acting input data file")
    if os.path.isdir(dataFilePath):
        print("data file is a directory:%s" % dataFilePath)
        for root,dirs,files in os.walk(os.path.abspath(dataFilePath)):
            for file in files:
                filename,fileext=os.path.splitext(file)
                if fileext=='.xlsx':
                    datafileabspath = root+os.sep+file					
                    _actSingleDataFile_GRCm38_snp142Common(datafileabspath,profileSourceData)
    elif os.path.isfile(dataFilePath):
        print("data file is a single file:%s" % dataFilePath)
        datafileabspath = os.path.abspath(dataFilePath)
        _actSingleDataFile_GRCm38_snp142Common(datafileabspath,profileSourceData)
    print("action is end")

def _actSingleDataFile_GRCm38_strand(datafileabspath,profileSourceData):
	
	print("dealing data file :%s" % datafileabspath)
	if not os.path.isfile(datafileabspath):
		print("data file :%s is not exist!" % datafileabspath)
		sys.exit()
	#DEAL
	resultFilePath = generateResultFilePath(datafileabspath)
	if os.path.isfile(resultFilePath):
		print("delete old  result file :%s" % resultFilePath)
		os.remove(resultFilePath)
	
	print("loading data file")
	wb=load_workbook(filename=datafileabspath,data_only=True,read_only=True)##fast mode
	ws=wb.active
	
	dataFileDataSet=[]
	chromosomeColumn = -1
	regionColumn=-1
	
	##insert column  index defintion
	i=0
	
	print("generating data set from data file")
	
	for row in ws.rows:##first row 标题行
		dataFileRow = []
		##insert 1 columns 
		for insertItem in range(0,1): ##repClass-mode ##此处变更时，下面chromosomeColumn，regionColumn 相应变更
			dataFileRow.insert(0,'')		
		for cell in row:			
			dataFileRow.append(cell.value)
			if(chromosomeColumn==-1 and cell.value.lower()=='chromosome'):
				chromosomeColumn=i+1   ##repClass-mode ## insertItem : 1 0=>1
				print("found Chromosome Column index is:%s" % chromosomeColumn)
			if(regionColumn==-1 and cell.value.lower()=='region'):
				regionColumn=i+1	##repClass-mode ## insertItem : 1 0=>1
				print("found Region Column index is:%s" % regionColumn)			
			i=i+1

		dataFileDataSet.append(dataFileRow)
		###save all cell.vaule to[[],[],...,[]]
	print("generated end")		
	##insert repClass column and repFamily column after region's column
	##keep insert  order
	##repClass-mode
	print("insert title column")
	
	dataFileDataSet[0][0]='strand'
	strandCol = 0

	rowMaxCount = len(dataFileDataSet)		
	
	print("calculating")
	for row in range(1,rowMaxCount):###第0行为标题行		
		dstChromosome = dataFileDataSet[row][chromosomeColumn] 
		dstRegion = int(dataFileDataSet[row][regionColumn])
		## geneName !== ''
		dstGeneName = dataFileDataSet[row][chromosomeColumn+8]
		print(dstGeneName) 
		print("current Chromosome:Region is : %s:%s" %(dstChromosome,dstRegion))
		chrKey = 'chr'+str(dstChromosome)
		if chrKey in list(profileSourceData.keys()):
			## ['chrom','txStart','txEnd','strand']
			## only search one time
			for sourceItem in profileSourceData[chrKey]:###[[],[],...,[]]
				if (dstRegion>=int(sourceItem[1]) and dstRegion<=int(sourceItem[2])):
					strandVal = sourceItem[3]
					if strandVal in ['-','+']:
						print("found target :%s" %sourceItem)
						dataFileDataSet[row][strandCol]=strandVal
						break
			
				
	print("calculated end")	
	saveDataToCSV([],dataFileDataSet,resultFilePath)					


def _actSingleDataFile_GRCm38_snp142Common(datafileabspath,profileSourceData):
	
	print("dealing data file :%s" % datafileabspath)
	if not os.path.isfile(datafileabspath):
		print("data file :%s is not exist!" % datafileabspath)
		sys.exit()
	#DEAL
	resultFilePath = generateResultFilePath(datafileabspath)
	if os.path.isfile(resultFilePath):
		print("delete old  result file :%s" % resultFilePath)
		os.remove(resultFilePath)
	
	print("loading data file")
	wb=load_workbook(filename=datafileabspath,data_only=True,read_only=True)##fast mode
	ws=wb.active
	
	dataFileDataSet=[]
	chromosomeColumn = -1
	regionColumn=-1
	
	##insert column  index defintion
	i=0
	
	print("generating data set from data file")
	
	for row in ws.rows:##first row 标题行
		dataFileRow = []
		##insert 1 columns 
		for insertItem in range(0,1): ##repClass-mode ##此处变更时，下面chromosomeColumn，regionColumn 相应变更
			dataFileRow.insert(0,'')		
		for cell in row:			
			dataFileRow.append(cell.value)
			if(chromosomeColumn==-1 and cell.value.lower()=='chromosome'):
				chromosomeColumn=i+1   ##repClass-mode ## insertItem : 1 0=>1
				print("found Chromosome Column index is:%s" % chromosomeColumn)
			if(regionColumn==-1 and cell.value.lower()=='region'):
				regionColumn=i+1	##repClass-mode ## insertItem : 1 0=>1
				print("found Region Column index is:%s" % regionColumn)			
			i=i+1

		dataFileDataSet.append(dataFileRow)
		###save all cell.vaule to[[],[],...,[]]
	print("generated end")		
	##insert repClass column and repFamily column after region's column
	##keep insert  order
	##repClass-mode
	print("insert title column")
	
	dataFileDataSet[0][0]='snp142Common'
	snp142CommonCol = 0

	rowMaxCount = len(dataFileDataSet)		
	
	print("calculating")
	for row in range(1,rowMaxCount):###第0行为标题行		
		dstChromosome = dataFileDataSet[row][chromosomeColumn] 
		dstRegion = int(dataFileDataSet[row][regionColumn])
		## geneName !== ''
		#dstGeneName = dataFileDataSet[row][chromosomeColumn+8]
		#print(dstGeneName) 
		print("current Chromosome:Region is : %s:%s" %(dstChromosome,dstRegion))
		chrKey = 'chr'+str(dstChromosome)
		if chrKey in list(profileSourceData.keys()):
			## ['chrom','chromStart','chromEnd','name']
			## only search one time
			for sourceItem in profileSourceData[chrKey]:###[[],[],...,[]]
				if (dstRegion>=int(sourceItem[1]) and dstRegion<=int(sourceItem[2])):
					snp142CommonVal = sourceItem[3]
					if snp142CommonVal != '':
						print("found target :%s" %sourceItem)
						dataFileDataSet[row][snp142CommonCol]=snp142CommonVal
						break
			
				
	print("calculated end")	
	saveDataToCSV([],dataFileDataSet,resultFilePath)		

def _actSingleDataFile_GRCm38_RepeatMasker(datafileabspath,profileSourceData):
	
	print("dealing data file :%s" % datafileabspath)
	if not os.path.isfile(datafileabspath):
		print("data file :%s is not exist!" % datafileabspath)
		sys.exit()
	#DEAL
	resultFilePath = generateResultFilePath(datafileabspath)
	if os.path.isfile(resultFilePath):
		print("delete old  result file :%s" % resultFilePath)
		os.remove(resultFilePath)
	
	print("loading data file")
	wb=load_workbook(filename=datafileabspath,data_only=True,read_only=True)##fast mode
	ws=wb.active
	
	dataFileDataSet=[]
	chromosomeColumn = -1
	regionColumn=-1
	
	##insert column  index defintion
	i=0
	
	print("generating data set from data file")
	
	for row in ws.rows:##first row 标题行
		dataFileRow = []
		##insert 8 columns for 4(sine,line,ltr,dna)x2(repclass,repfamily)
		for insertItem in range(0,8): ##repClass-mode ##此处变更时，下面chromosomeColumn，regionColumn 相应变更
			dataFileRow.insert(0,'')		
		for cell in row:			
			dataFileRow.append(cell.value)
			if(chromosomeColumn==-1 and cell.value.lower()=='chromosome'):
				chromosomeColumn=i+8   ##repClass-mode ## insertItem : 8 0=>8
				print("found Chromosome Column index is:%s" % chromosomeColumn)
			if(regionColumn==-1 and cell.value.lower()=='region'):
				regionColumn=i+8	##repClass-mode ## insertItem : 8 0=>8
				print("found Region Column index is:%s" % regionColumn)			
			i=i+1

		dataFileDataSet.append(dataFileRow)
		###save all cell.vaule to[[],[],...,[]]
	print("generated end")		
	##insert repClass column and repFamily column after region's column
	##keep insert  order
	##repClass-mode
	print("insert title column")
	
	dataFileDataSet[0][0]='repClassSINE'
	dataFileDataSet[0][1]='repFamilySINE'
	dataFileDataSet[0][2]='repClassLINE'
	dataFileDataSet[0][3]='repFamilyLINE'
	dataFileDataSet[0][4]='repClassLTR'
	dataFileDataSet[0][5]='repFamilyLTR'
	dataFileDataSet[0][6]='repClassDNA'
	dataFileDataSet[0][7]='repFamilyDNA'
					
	
	rowMaxCount = len(dataFileDataSet)		
	
	print("calculating")
	for row in range(1,rowMaxCount):###第0行为标题行		
		dstChromosome = dataFileDataSet[row][chromosomeColumn] 
		dstRegion = int(dataFileDataSet[row][regionColumn])
		print("current Chromosome:Region is : %s:%s" %(dstChromosome,dstRegion))
		chrKey = 'chr'+str(dstChromosome)
		if chrKey in list(profileSourceData.keys()):
			##sourceItem:['genoName','genoStart','genoEnd','repClass','repFamily']
			for sourceItem in profileSourceData[chrKey]:###[[],[],...,[]]
				if (dstRegion>=int(sourceItem[1]) and dstRegion<=int(sourceItem[2])):
					##repClass:sourceItem[3]  repFamily:sourceItem[4]
					#set repClass column and repFamily column value
					
					repClassVal = sourceItem[3]
					repFamilyVal = sourceItem[4]
					##repClass-mode
					
					##todo,trim space，upper
					
					
					if repClassVal=='SINE':
						repClassCol=0
						repFamilyCol=1
						dataFileDataSet[row][repClassCol]=repClassVal
						dataFileDataSet[row][repFamilyCol]=repFamilyVal						
					if repClassVal=='LINE':
						repClassCol=2
						repFamilyCol=3
						dataFileDataSet[row][repClassCol]=repClassVal
						dataFileDataSet[row][repFamilyCol]=repFamilyVal						
					if repClassVal=='LTR':
						repClassCol=4
						repFamilyCol=5
						dataFileDataSet[row][repClassCol]=repClassVal
						dataFileDataSet[row][repFamilyCol]=repFamilyVal						
					if repClassVal=='DNA':
						repClassCol=6
						repFamilyCol=7
						dataFileDataSet[row][repClassCol]=repClassVal
						dataFileDataSet[row][repFamilyCol]=repFamilyVal
					print("found target :%s" %sourceItem)
					
					##todo , sine,line and so on  same line
					## 考虑注释break 因为sine，line，ltr，dna 可能不是相斥的
					##break
	
	print("calculated end")
				
	saveDataToCSV([],dataFileDataSet,resultFilePath)
		

###query source data####

def readyProfileSourceData(genome,settings):
	dbProfile = settings['profile']
	if (genome=='GRCm38' and dbProfile=='RepeatMasker'):
		return _readyProfileSourceData_GRCm38_RepeatMasker(genome,settings)
	elif (genome=='GRCm38' and dbProfile=='strand'):
		return  _readyProfileSourceData_GRCm38_strand(genome,settings)
	elif (genome=='GRCm38' and dbProfile=='snp142Common'):
    		return  _readyProfileSourceData_GRCm38_snp142Common(genome,settings)

def _loadProfileSourceData_GRCm38_RepeatMasker(genome,settings):
	print("loading profile source data")
	dbProfile = settings['profile']
	
	profileSourceDataPath = setProfileSourceDataPath(genome,dbProfile)
	
	if not os.path.exists(profileSourceDataPath):
		print("connected to remote mysql database online")
		dbType = settings['type']
		dbConfig = {
			'user':settings['user'],
			'host':settings['host'],
			'database':settings['database'],
			'raise_on_warnings':True
		}
		dbConn = dbConnector(dbType,dbConfig)
		querySourceData(genome,dbProfile,dbConn)##save to  profileSourceDataPath
		dbConn.close()
	
	profileSourceData = getDataFromCSV(True,',',profileSourceDataPath)
	
	print("loaded successfully")
	return profileSourceData

def _loadProfileSourceData_GRCm38_strand(genome,settings):
    print("loading profile source data")
    dbProfile = settings['profile']	
    profileSourceDataPath = setProfileSourceDataPath(genome,dbProfile)
	
    if not os.path.exists(profileSourceDataPath):
        print("connected to remote mysql database online")
        dbType = settings['type']
        dbConfig = {
			'user':settings['user'],
			'host':settings['host'],
			'database':settings['database'],
			'raise_on_warnings':True
		}
        dbConn = dbConnector(dbType,dbConfig)
        querySourceData(genome,dbProfile,dbConn)##save to  profileSourceDataPath
        dbConn.close()
	
    profileSourceData = getDataFromCSV(True,',',profileSourceDataPath)
	
    print("loaded successfully")
        
    return profileSourceData		

def _loadProfileSourceData_GRCm38_snp142Common(genome,settings):
    print("loading profile source data")
    dbProfile = settings['profile']	
    profileSourceDataPath = setProfileSourceDataPath(genome,dbProfile)
	
    if not os.path.exists(profileSourceDataPath):
        print("connected to remote mysql database online")
        dbType = settings['type']
        dbConfig = {
			'user':settings['user'],
			'host':settings['host'],
			'database':settings['database'],
			'raise_on_warnings':True
		}
        dbConn = dbConnector(dbType,dbConfig)
        querySourceData(genome,dbProfile,dbConn)##save to  profileSourceDataPath
        dbConn.close()
	
    profileSourceData = getDataFromCSV(True,',',profileSourceDataPath)
	
    print("loaded successfully")
        
    return profileSourceData	


def _readyProfileSourceData_GRCm38_RepeatMasker(genome,settings):
	print("converting profile source data to dict")
	
	profileSourceData = _loadProfileSourceData_GRCm38_RepeatMasker(genome,settings)
		
	profileSourceDataDictionaryByCHR = {}
	#profile csv file : column : ['genoName','genoStart','genoEnd','repClass','repFamily']
	for row in profileSourceData:
		chrKey=str(row[0])
		if chrKey not in list(profileSourceDataDictionaryByCHR.keys()):
			profileSourceDataDictionaryByCHR[chrKey] = []
		
		profileSourceDataDictionaryByCHR[chrKey].append(row)
	print("converted successfully")
	return profileSourceDataDictionaryByCHR		

def _readyProfileSourceData_GRCm38_snp142Common(genome,settings):
    print("converting profile source data to dict")
    profileSourceData = _loadProfileSourceData_GRCm38_snp142Common(genome,settings)
		
    profileSourceDataDictionaryByCHR = {}
	## ['chrom','chromStart','chromEnd','name']
    for row in profileSourceData:
        chrKey=str(row[0])
        if chrKey not in list(profileSourceDataDictionaryByCHR.keys()):
            profileSourceDataDictionaryByCHR[chrKey] = []
        
        profileSourceDataDictionaryByCHR[chrKey].append(row)
    
    print("converted successfully")
    return profileSourceDataDictionaryByCHR					

def _readyProfileSourceData_GRCm38_strand(genome,settings):
    print("converting profile source data to dict")
    profileSourceData = _loadProfileSourceData_GRCm38_strand(genome,settings)
		
    profileSourceDataDictionaryByCHR = {}
	#profile csv file : column : ['genoName','genoStart','genoEnd','repClass','repFamily']
	## ['chrom','strand','txStart','txEnd']
    for row in profileSourceData:
        chrKey=str(row[0])
        if chrKey not in list(profileSourceDataDictionaryByCHR.keys()):
            profileSourceDataDictionaryByCHR[chrKey] = []
        
        profileSourceDataDictionaryByCHR[chrKey].append(row)
    
    print("converted successfully")
    return profileSourceDataDictionaryByCHR	

def querySourceData(genome,dbProfile,dbConn):
	print("current source data about genome is :%s,profile is :%s" % (genome,dbProfile))
	if (genome=='GRCm38' and dbProfile=='RepeatMasker'):
		profileSourceDataPath = setProfileSourceDataPath(genome,dbProfile)
		_query_source_data_GRCm38_RepeatMasker(dbConn,profileSourceDataPath)
	elif (genome=='GRCm38' and dbProfile=='strand'):	
		profileSourceDataPath = setProfileSourceDataPath(genome,dbProfile)
		_query_source_data_GRCm38_strand(dbConn,profileSourceDataPath)
	elif (genome=='GRCm38' and dbProfile=='snp142Common'):	
		profileSourceDataPath = setProfileSourceDataPath(genome,dbProfile)
		_query_source_data_GRCm38_snp142Common(dbConn,profileSourceDataPath)

def _query_source_data_GRCm38_RepeatMasker(dbConn,profileSourceDataPath):
	
	print("querying source data online")
	cursor = dbConn.cursor()
	
	column=['genoName','genoStart','genoEnd','repClass','repFamily']
	
	##repClass-mode
	query = "select genoName,genoStart,genoEnd,repClass,repFamily from rmsk where repClass in ('SINE','LINE','LTR','DNA')"

	cursor.execute(query)

	data = []

	for (genoName,genoStart,genoEnd,repClass,repFamily) in cursor:
		data.append([genoName,genoStart,genoEnd,repClass,repFamily])			
	
	print("query successfully")		
	## todo ,
	saveDataToCSV(column,data,profileSourceDataPath)		
	cursor.close()
	

def _query_source_data_GRCm38_strand(dbConn,profileSourceDataPath):
	
	print("querying source data online")
	cursor = dbConn.cursor()
	## todo txStart,txEnd 和genoStart,genoEnd 是否相等

	##### chr table
	# 此些表加入会出错
	## in fact : _est,_intronEst,_mrna
	## mgcFullMrna,orfeomeMrna
	## nestedRepeats
	#g=list(range(1,20))+['X','Y']
	#column=['tName','tStart','tEnd','strand']
	#tables=[('chr'+str(x)+'_est') for x in g]+[('chr'+str(x)+'_mrna') for x in g]+['mgcFullMrna','orfeomeMrna']
	########################################
	#[('chr'+str(x)+'_intronEst') for x in g]

	data = []
	#for tb in tables:	
		###
		#################
	#	query = "select tName,tStart,tEnd,strand from %s where 1 " % tb
	#	cursor.execute(query)

	#	for (chrom,txStart,txEnd,strand) in cursor:
	#		data.append([chrom,txStart,txEnd,strand])			

	### geneName
	column=['chrom','txStart','txEnd','strand']
	## genscan,knownGeneOld8,wgEncodeGencode2wayConsPseudoVM11,wgEncodeGencode2wayConsPseudoVM9,wgEncodeGencodeBasicVM9
	## wgEncodeGencodeCompVM11,wgEncodeGencodeCompVM9,wgEncodeGencodePolyaVM11,wgEncodeGencodePolyaVM9
	## wgEncodeGencodePseudoGeneVM11,wgEncodeGencodePseudoGeneVM9
	tables_gene=['augustusGene','ccdsGene','geneid','knownGene','mgcGenes','orfeomeGenes','refGene','sgpGene','wgEncodeGencodePseudoGeneVM11','xenoRefGene','wgEncodeGencodeBasicVM11','genscan','knownGeneOld8','wgEncodeGencode2wayConsPseudoVM11','wgEncodeGencodeCompVM11','wgEncodeGencodePolyaVM11']
	for tb_g in tables_gene:
		query = "select chrom,txStart,txEnd,strand from %s where 1 " % tb_g
		cursor.execute(query)
		for (chrom,txStart,txEnd,strand) in cursor:
			data.append([chrom,txStart,txEnd,strand])

	print("query successfully")		
	saveDataToCSV(column,data,profileSourceDataPath,',')		
	cursor.close()
	



###query end####



def _query_source_data_GRCm38_snp142Common(dbConn,profileSourceDataPath):
	
	print("querying source data online")
	cursor = dbConn.cursor()
	
	column=['chrom','chromStart','chromEnd','name']
	
	##repClass-mode
	query = "select chrom,chromStart,chromEnd,name from snp142Common where 1"

	cursor.execute(query)

	data = []

	for (chrom,chromStart,chromEnd,name) in cursor:
		data.append([chrom,chromStart,chromEnd,name])			
	
	print("query successfully")		
	## todo ,
	saveDataToCSV(column,data,profileSourceDataPath)		
	cursor.close()
	



###query end####


def main():
	
	try:
		opts,args = getopt.getopt(sys.argv[1:],"hs:g:d:r:c:e:t:o:f:y:b:x:",["help","setting=","genome=","data=","result=","cluster=","record=","threshold=",'coverage=','frequency=','bayes=','bed=','exon=',"intersectClusterName=","repeatClusterName=","gene="])
	except getopt.GetoptError as err:
		print(err)
		usage()
		sys.exit(2)
	
	settingsVar={
		'filePath':'',
		'section':''
	}
	genome = ''
	
	##mark repclass,repfamily
	dataFilePath = ''
	##statistic repfamily
	resultFilePath = ''
	##统计每一列repfamily上有多少不同的clustername
	##intersectClusterName 
	intersectClusterName = ''
	repeatClusterName = 0 ##0,1
	##cluster file
	clusterFilePath = ''
	
	clusterConfigs={
		'record':'',#3
		'threshold':'',#2500
		'coverage':'',#5
		'frequency':'',#5
		'bayes':0#disabled 1:enabled
	}
	##mark cds,5utr,3utr,intron
	bedFilePath =''
	exonDataFilePath = ''
	
	geneFilePath = ''
	
	for opt,arg in opts:
		if opt in ('-h',"--help"):
			usage()
			sys.exit()
		elif opt in ('-s','--setting'):
			settingsVar['filePath']=arg
		elif opt in ('-g','--genome'):
			settingsVar['section']=arg
			genome = arg
		elif opt in ('-d','--data'):
			dataFilePath = arg
		elif opt in ('-r','--result'):
			resultFilePath = arg
		elif opt in ('--intersectClusterName'):
			intersectClusterName = arg
		elif opt in ('--repeatClusterName'):
			repeatClusterName = int(arg)
		elif opt in ('-c','--cluster'):
			clusterFilePath = arg
		elif opt in ('-e','--record'):
			clusterConfigs['record']=int(arg)
		elif opt in ('-t','--threshold'):
			clusterConfigs['threshold']=int(arg)
		elif opt in ('-o','--coverage'):
			clusterConfigs['coverage']=float(arg)
		elif opt in ('-f','--frequency'):
			clusterConfigs['frequency']=float(arg)
		elif opt in ('-y','--bayes'):
			clusterConfigs['bayes']=arg
		elif opt in ('-b','--bed'):
			bedFilePath = arg
		elif opt in ('-x','--exon'):
			exonDataFilePath = arg
		elif opt in ('--gene'):
			geneFilePath = arg
		

	###action####

	if geneFilePath !="":
		geneMapData(geneFilePath)
	else:
		if settingsVar['filePath'] !='':
			settings = readSettings(settingsVar)
			if dataFilePath !='':
				profileSourceData = []			
				profileSourceData = readyProfileSourceData(genome,settings)		
				actDataFile(genome,settings,dataFilePath,profileSourceData)
			if resultFilePath !='':
				statsResultFile(genome,settings,resultFilePath,intersectClusterName,repeatClusterName)
		else:
			if clusterFilePath !='':
				clusterFile(clusterFilePath,clusterConfigs)
			elif bedFilePath !='':
				exonFile(exonDataFilePath,bedFilePath)
			else:
				sys.exit()	

	###action end ####



if __name__ == "__main__":
	main()

